"use client";

import { useEffect, useState } from "react";
import { Button } from "@/components/ui/button";
import { DialogContent, DialogHeader, DialogTitle, DialogFooter } from "@/components/ui/dialog";
import { Input } from "@/components/ui/input";
import { Label } from "@/components/ui/label";
import { useUpdateCourse } from "@/hooks/course/useUpdateCourse";
import { CourseService } from "@/services/course.services";
import { useCourseCodes } from "@/hooks/course-code/useCourseCodes";

export default function EditDialog({
  courseId,
  title,
  onSubmit,
  onCancel,
}: {
  courseId: string;
  title: string;
  onSubmit: () => void;
  onCancel: () => void;
}) {
  const { updateCourse, loading } = useUpdateCourse();
  // listData ·ªü ƒë√¢y l√† danh s√°ch course codes
  const { listData: courseCodes, fetchCourseCodes } = useCourseCodes(); 

  const [form, setForm] = useState({
    courseCodeId: "",
    description: "",
    term: "",
    year: new Date().getFullYear(),
  });

  const [currentCourseCode, setCurrentCourseCode] = useState<string>(""); 
  const [loadingData, setLoadingData] = useState(true); // Gi·ªØ l√† true ƒë·ªÉ ban ƒë·∫ßu hi·ªÉn th·ªã Loading
  const [editingCode, setEditingCode] = useState(false);

  const handleChange = (key: string, value: any) => {
    setForm((prev) => ({ ...prev, [key]: value }));
  };

  const handleSave = async () => {
    if (!form.courseCodeId) {
      console.error("Missing courseCodeId");
      return;
    }

    const res = await updateCourse({
      courseId,
      courseCodeId: form.courseCodeId,
      description: form.description,
      term: form.term,
      year: form.year,
    });

    if (res?.success) {
      onSubmit();
    }
  };

  // Logic load d·ªØ li·ªáu ƒë√£ ƒë∆∞·ª£c s·ª≠a 
  useEffect(() => {
    if (!courseId) return;

    const loadData = async () => {
      setLoadingData(true);
      
      try {
        // 1. Lu√¥n ƒë·∫£m b·∫£o fetch course codes tr∆∞·ªõc v√† ƒë·ª£i k·∫øt qu·∫£
        // Tao g·ªçi fetch ·ªü ƒë√¢y ƒë·ªÉ n√≥ c·∫≠p nh·∫≠t state `courseCodes` (listData)
        // v√† ƒë·∫£m b·∫£o n√≥ ch·∫°y tr∆∞·ªõc khi l·∫•y chi ti·∫øt.
        if (courseCodes.length === 0) {
            await fetchCourseCodes({ page: 1, pageSize: 100, isActive: true });
        }

        // 2. Fetch chi ti·∫øt kh√≥a h·ªçc
        const res = await CourseService.getCourseById(courseId);

        // t√™n courseCode hi·ªán t·∫°i (hi·ªÉn th·ªã cho user)
        setCurrentCourseCode(`${res.course.courseCode} - ${res.course.courseCodeTitle}`);

        // 3. Map t·ª´ courseCode string -> id
        // D√πng listData hi·ªán t·∫°i. N·∫øu b∆∞·ªõc 1 load data th√†nh c√¥ng, 
        // n√≥ s·∫Ω n·∫±m trong `courseCodes` (listData) trong l·∫ßn render ti·∫øp theo.
        // NH∆ØNG: v√¨ `useEffect` n√†y ch·ªâ ph·ª• thu·ªôc v√†o `courseId`, 
        // l·∫ßn ƒë·∫ßu ch·∫°y, `courseCodes` c√≥ th·ªÉ v·∫´n l√† m·∫£ng r·ªóng.
        
        // üåü C√ÅCH GI·∫¢I QUY·∫æT T·ªêT NH·∫§T: T√°ch l√†m 2 b∆∞·ªõc v√† d√πng dependency array!

      } catch (err) {
        console.error("Failed to fetch course detail", err);
        setLoadingData(false);
      }
    };
    
    // N·∫øu ch∆∞a c√≥ code list th√¨ g·ªçi load data
    if (courseCodes.length === 0) {
        loadData();
    } else {
        // N·∫øu ƒë√£ c√≥ code list, th√¨ load detail v√† set form
        const loadDetailAndSetForm = async () => {
             try {
                // Fetch chi ti·∫øt kh√≥a h·ªçc
                const res = await CourseService.getCourseById(courseId);

                // t√™n courseCode hi·ªán t·∫°i
                setCurrentCourseCode(`${res.course.courseCode} - ${res.course.courseCodeTitle}`);

                // Map (S·ª≠ d·ª•ng courseCodes ƒë√£ c√≥)
                const matched = courseCodes.find((cc) => cc.code === res.course.courseCode);

                setForm({
                    // ƒê·∫£m b·∫£o c√≥ ID, n·∫øu kh√¥ng n√∫t Save s·∫Ω disabled
                    courseCodeId: matched ? matched.id : "", 
                    description: res.course.description,
                    term: res.course.term,
                    year: res.course.year,
                });
             } catch (err) {
                 console.error("Failed to fetch course detail", err);
             } finally {
                 setLoadingData(false);
             }
        }
        loadDetailAndSetForm();
    }

  // Dependency array: Ph·ª• thu·ªôc v√†o courseId v√† listData.length.
  // N·∫øu listData.length thay ƒë·ªïi (sau khi fetch th√†nh c√¥ng), 
  // useEffect s·∫Ω ch·∫°y l·∫°i v√† ƒëi v√†o nh√°nh `else` ƒë·ªÉ load chi ti·∫øt v√† set form.
  }, [courseId, courseCodes.length]); 

  return (
    <DialogContent className="bg-white border-slate-200 text-slate-900">
      <DialogHeader>
        <DialogTitle>{title}</DialogTitle>
      </DialogHeader>

      {loadingData ? (
        <div className="py-6 text-center text-slate-500">Loading...</div>
      ) : (
        <div className="space-y-4 py-2">
          {/* Course Code */}
          <div>
            <Label>Course Code</Label>
            {!editingCode ? (
              <div className="flex items-center justify-between">
                <p className="text-sm text-slate-700">{currentCourseCode}</p>
                <Button
                  variant="ghost"
                  className="text-emerald-600 px-2 h-7"
                  onClick={() => setEditingCode(true)}
                >
                  Change
                </Button>
              </div>
            ) : (
              <div className="flex items-center gap-2">
                <select
                  value={form.courseCodeId}
                  onChange={(e) => handleChange("courseCodeId", e.target.value)}
                  className="flex-1 border border-slate-300 rounded-md p-2 text-sm"
                >
                  <option value="">-- Select Course Code --</option>
                  {courseCodes.map((cc) => (
                    <option key={cc.id} value={cc.id}>
                      {cc.code} - {cc.title}
                    </option>
                  ))}
                </select>
                <Button
                  variant="ghost"
                  className="text-slate-500 px-2 h-7"
                  onClick={() => setEditingCode(false)}
                >
                  Cancel
                </Button>
              </div>
            )}
          </div>

          <div>
            <Label>Description</Label>
            <Input
              value={form.description}
              onChange={(e) => handleChange("description", e.target.value)}
            />
          </div>

          <div>
            <Label>Term</Label>
            <Input
              value={form.term}
              onChange={(e) => handleChange("term", e.target.value)}
            />
          </div>

          <div>
            <Label>Year</Label>
            <Input
              type="number"
              value={form.year}
              onChange={(e) => handleChange("year", parseInt(e.target.value))}
            />
          </div>
        </div>
      )}

      <DialogFooter>
        <Button onClick={handleSave} disabled={loading || !form.courseCodeId}>
          {loading ? "Saving..." : "Save"}
        </Button>
        <Button variant="ghost" onClick={onCancel}>
          Cancel
        </Button>
      </DialogFooter>
    </DialogContent>
  );
}